# -*- coding: utf-8 -*-
"""
Created on Tue Mar 15 15:32:11 2022

@author: afdr9
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm

def build_up_b(rho, dt, dx, dy, u, v):
    b = np.zeros_like(u)
    b[1:-1,1:-1] = rho*(((1/dt)*(((u[1:-1,2:]-u[1:-1,0:-2])/(2*dx))+((v[2:,1:-1]-v[0:-2,1:-1])/(2*dy))))\
                  - (((u[1:-1,2:]-u[1:-1,0:-2])/(2*dx))**2)\
                  - (2*((u[2:,1:-1]-u[0:-2,1:-1])/(2*dy))*((v[1:-1,2:]-v[1:-1,0:-2])/(2*dx)))\
                  - (((v[2:,1:-1]-v[0:-2,1:-1])/(2*dy))**2))
    b[1:-1,-1] = rho*(((1/dt)*(((u[1:-1,0]-u[1:-1,-2])/(2*dx))+((v[2:,-1]-v[0:-2,-1])/(2*dy))))\
                  - (((u[1:-1,0]-u[1:-1,-2])/(2*dx))**2)\
                  - (2*((u[2:,-1]-u[0:-2,-1])/(2*dy))*((v[1:-1,0]-v[1:-1,-2])/(2*dx)))\
                  - (((v[2:,-1]-v[0:-2,-1])/(2*dy))**2))
    b[1:-1,0] = rho*(((1/dt)*(((u[1:-1,1]-u[1:-1,-1])/(2*dx))+((v[2:,0]-v[0:-2,0])/(2*dy))))\
                  - (((u[1:-1,1]-u[1:-1,-1])/(2*dx))**2)\
                  - (2*((u[2:,0]-u[0:-2,0])/(2*dy))*((v[1:-1,1]-v[1:-1,-1])/(2*dx)))\
                  - (((v[2:,0]-v[0:-2,0])/(2*dy))**2))
    return b

def pressure_poisson_periodic(p, dx, dy):
    pn = np.empty_like(p)
    for i in range(nit):
        pn = p.copy()
        p[1:-1,1:-1] = (((pn[1:-1,2:]+pn[1:-1,0:-2])*(dy**2) + (pn[2:,1:-1]+pn[0:-2,1:-1])*(dx**2))\
                     / (2*(dx**2 + dy**2)))\
                     - ((dx**2 * dy**2)/(2 * (dx**2 + dy**2)))\
                     * (b[1:-1, 1:-1])
        p[1:-1,-1] = (((pn[1:-1,0]+pn[1:-1,-2])*(dy**2) + (pn[2:,-1]+pn[0:-2,-1])*(dx**2))\
                     / (2*(dx**2 + dy**2)))\
                     - ((dx**2 * dy**2)/(2 * (dx**2 + dy**2)))\
                     * (b[1:-1,-1])                     
        p[1:-1,0] = (((pn[1:-1,1]+pn[1:-1,-1])*(dy**2) + (pn[2:,0]+pn[0:-2,0])*(dx**2))\
                     / (2*(dx**2 + dy**2)))\
                     - ((dx**2 * dy**2)/(2 * (dx**2 + dy**2)))\
                     * (b[1:-1,0])                
        p[-1,:] = p[-2,:]
        p[0,:]  = p[1,:]
    return p

nx = 41
ny = 41
nt = 10
nit = 50 
c = 1
dx = 2 / (nx - 1)
dy = 2 / (ny - 1)
x = np.linspace(0, 2, nx)
y = np.linspace(0, 2, ny)
X, Y = np.meshgrid(x, y)

rho = 1
nu = .1
F = 1
dt = .01

u = np.zeros((ny, nx))
un = np.zeros((ny, nx))

v = np.zeros((ny, nx))
vn = np.zeros((ny, nx))

p = np.ones((ny, nx))
pn = np.ones((ny, nx))

b = np.zeros((ny, nx))

udiff = 1
stepcount = 0

while udiff > .001:
    un = u.copy()
    vn = v.copy()
    b = build_up_b(rho, dt, dx, dy, u, v)
    p = pressure_poisson_periodic(p, dx, dy)
    u[1:-1,1:-1] = (un[1:-1,1:-1])\
                 - (un[1:-1, 1:-1]*(dt/dx)*(un[1:-1,1:-1]-un[1:-1,0:-2]))\
                 - (vn[1:-1, 1:-1]*(dt/dy)*(un[1:-1,1:-1]-un[0:-2,1:-1]))\
                 - ((dt/(2*rho*dx))*(p[1:-1,2:]-p[1:-1,0:-2]))\
                 + (nu*(((dt / dx**2)*(un[1:-1,2:] - 2*un[1:-1,1:-1] + un[1:-1,0:-2]))\
                 + ((dt / dy**2)*(un[2:,1:-1] - 2*un[1:-1,1:-1] + un[0:-2,1:-1]))))\
                 + (F*dt)
    v[1:-1,1:-1] = (vn[1:-1,1:-1])\
                 - (un[1:-1, 1:-1]*(dt/dx)*(vn[1:-1,1:-1]-vn[1:-1,0:-2]))\
                 - (vn[1:-1, 1:-1]*(dt/dy)*(vn[1:-1,1:-1]-vn[0:-2,1:-1]))\
                 - ((dt/(2*rho*dy))*(p[1:-1,2:]-p[1:-1,0:-2]))\
                 + (nu*(((dt / dx**2)*(vn[1:-1,2:] - 2*vn[1:-1,1:-1] + vn[1:-1,0:-2]))\
                 + ((dt / dy**2)*(vn[2:,1:-1] - 2*vn[1:-1,1:-1] + vn[0:-2,1:-1]))))
    u[1:-1,-1] = (un[1:-1,-1])\
               - (un[1:-1,-1]*(dt/dx)*(un[1:-1,-1]-un[1:-1,-2]))\
               - (vn[1:-1,-1]*(dt/dy)*(un[1:-1,-1]-un[0:-2,-1]))\
               - ((dt/(2*rho*dx))*(p[1:-1,0]-p[1:-1,-2]))\
               + (nu*(((dt / dx**2)*(un[1:-1,0] - 2*un[1:-1,-1] + un[1:-1,-2]))\
               + ((dt / dy**2)*(un[2:,-1] - 2*un[1:-1,-1] + un[0:-2,-1]))))\
               + (F*dt)
    u[1:-1,0] = (un[1:-1,0])\
               - (un[1:-1,0]*(dt/dx)*(un[1:-1,0]-un[1:-1,-1]))\
               - (vn[1:-1,0]*(dt/dy)*(un[1:-1,0]-un[0:-2,0]))\
               - ((dt/(2*rho*dx))*(p[1:-1,1]-p[1:-1,-1]))\
               + (nu*(((dt / dx**2)*(un[1:-1,1] - 2*un[1:-1,0] + un[1:-1,-1]))\
               + ((dt / dy**2)*(un[2:,0] - 2*un[1:-1,0] + un[0:-2,0]))))\
               + (F*dt)
    v[1:-1,-1] = (vn[1:-1,-1])\
               - (un[1:-1,-1]*(dt/dx)*(vn[1:-1,-1]-vn[1:-1,-2]))\
               - (vn[1:-1,-1]*(dt/dy)*(vn[1:-1,-1]-vn[0:-2,-1]))\
               - ((dt/(2*rho*dy))*(p[2:,-1]-p[0:-2,-1]))\
               + (nu*(((dt / dx**2)*(vn[1:-1,0] - 2*vn[1:-1,-1] + vn[1:-1,-2]))\
               + ((dt / dy**2)*(vn[2:,-1] - 2*vn[1:-1,-1] + vn[0:-2,-1]))))               
    v[1:-1,0] = (vn[1:-1,0])\
               - (un[1:-1,0]*(dt/dx)*(vn[1:-1,0]-vn[1:-1,-1]))\
               - (vn[1:-1,0]*(dt/dy)*(vn[1:-1,0]-vn[0:-2,0]))\
               - ((dt/(2*rho*dy))*(p[2:,0]-p[0:-2,0]))\
               + (nu*(((dt / dx**2)*(vn[1:-1,1] - 2*vn[1:-1,0] + vn[1:-1,-1]))\
               + ((dt / dy**2)*(vn[2:,0] - 2*vn[1:-1,0] + vn[0:-2,0]))))                  
    u[0, :] = 0
    u[-1, :] = 0
    v[0, :] = 0
    v[-1, :]=0
    udiff = (np.sum(u) - np.sum(un)) / np.sum(u)
    stepcount += 1

print(stepcount)
plt.figure(figsize=(10,10))
vel = np.sqrt(u**2 + v**2)
plt.contourf(X, Y, vel, level = 10, cmap ='jet')
plt.colorbar()
plt.contour(X, Y, vel, level = 10, cmap = 'jet')
plt.quiver(X[::2, ::2], Y[::2, ::2], u[::2, ::2], v[::2, ::2])
plt.show()
